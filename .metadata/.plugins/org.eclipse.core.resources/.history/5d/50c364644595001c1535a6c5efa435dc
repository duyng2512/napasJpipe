package com.openwaygroup.pipe.napastopup;

import com.openwaygroup.application.pipe.impl.stream.FileSkipException;
import com.openwaygroup.application.pipe.impl.stream.IWrappedInputStream;
import com.openwaygroup.application.process.registry.PRLogRecord;
import com.openwaygroup.application.server.ui.ShowDialogParameters;
import com.openwaygroup.owsysdb.process.registry.processlog.ProcessLogRecord;

public class Mapper extends com.openwaygroup.pipe.napastopup.autogen.Mapper {

	/**
	 * This method will be called at the beginning of the pipe's execution,
	 * before any data is retrieved by source. Add your opening code here.
	 */
	protected void open() throws Exception {
		System.out.println("This IDE fucking suck");
		
	}

	/**
	 * This method will be called for each record (table row, record in flat
	 * file, xml element) retrieved by the pipe's source. Add your code to
	 * handle incoming data here.
	 */
	protected void execute() throws Exception {
	}

	/**
	 * This method will be called at the end of the pipe's execution. Add your
	 * closing code here.
	 */
	protected void close() throws Exception {
	}

	protected void processMessage(String type, 
								String msg, 
								boolean isMsgBox,
								int boxType, 
								Long docId) {
		msg = "[NapasImport]:" + msg;
		ProcessLogRecord logRecord = new ProcessLogRecord(type, msg, docId);

		try {
			pipe.log(logRecord);
		} catch (Exception e) {
			pipe.cancel();
		}

		if (isMsgBox) {
			pipe.showMessageDialog(new ShowDialogParameters("NapasImport", msg,
					boxType));
		}
	}

	protected void skipFile(String errText) throws FileSkipException {
		processMessage(PRLogRecord.ERROR, errText, true,
						ShowDialogParameters.ERROR_MESSAGE, null);
		throw new FileSkipException(IWrappedInputStream.CLOSE_ACTION_REJECT);
	}
}